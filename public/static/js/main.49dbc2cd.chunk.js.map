{"version":3,"sources":["components/auth/AuthLayout.js","components/utils/Alert.js","components/auth/LoginForm.js","components/auth/Login.js","components/auth/SignUpForm.js","components/auth/SignUp.js","config/apollo.js","components/context/userContext.js","components/layout/MovileNavigation.js","components/layout/UserNavOptions.js","components/layout/Nav.js","components/layout/Layout.js","components/messages/LoadingMessage.js","helpers/formatDate.js","components/messages/Message.js","components/messages/GetMessage.js","components/messages/MessageForm.js","components/messages/PostMessage.js","components/Home.js","components/MyMessages.js","routes/PrivateRoute.js","routes/PublicRoute.js","routes/AppRouter.js","App.js","serviceWorkerRegistration.js","index.js"],"names":["AuthLayout","children","className","style","fontFamily","background","memo","alertType","info","color","logo","xmlns","viewBox","d","success","error","Alert","type","msg","Object","keys","includes","LoginForm","formik","onSubmit","handleSubmit","touched","email","errors","htmlFor","id","name","onChange","handleChange","onBlur","handleBlur","value","values","password","LOGIN","gql","Login","useMutation","loginUser","useState","setError","history","useHistory","useFormik","initialValues","validationSchema","Yup","required","a","variables","input","data","localStorage","setItem","token","push","message","setTimeout","to","SignUpForm","CREATE_USER","SignUp","createUser","httpLink","createHttpLink","uri","process","fetch","authLink","setContext","_","headers","getItem","client","ApolloClient","connectToDevTools","cache","InMemoryCache","link","concat","userContext","createContext","MovileNavigation","fill","stroke","strokeLinecap","strokeLinejoin","strokeWidth","UserNavOptions","user","defaultValue","role","onClick","removeItem","resetStore","go","Nav","getUser","GET_USER","Layout","useQuery","useEffect","Provider","class","LoadingMessage","formatDate","date","Date","year","Intl","DateTimeFormat","format","month","day","Message","own","setEdit","createdAt","text","GET_RANDOM_MESSAGE","GetMessage","loading","refetch","setMessage","getRandomMessage","handleRefetch","MessageForm","initialText","setText","e","placeholder","target","length","CREATE_MESSAGE","PostMessage","createMessage","preventDefault","trim","toast","console","log","Home","GET_USER_MESSAGES","UPDATE_MESSAGE","MyMessages","updateMessage","edit","messages","getUserMessages","handleEdit","warn","map","isOpen","onRequestClose","contentLabel","content","height","width","margin","PrivateRoute","isAuthenticated","Component","component","rest","props","PublicRoute","AppRouter","exact","path","App","ApolloProvider","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","document","getElementById","URL","href","origin","addEventListener","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","serviceWorkerRegistration"],"mappings":"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","file":"static/js/main.49dbc2cd.chunk.js","sourcesContent":["import React, { memo } from 'react'\r\n\r\nconst AuthLayout = ({ children }) => {\r\n\r\n    return (\r\n        <>\r\n            <div className=\"body-bg min-h-screen pt-12 md:pt-20 pb-6 px-2 md:px-0\" \r\n                style={{\r\n                    fontFamily: '\"Lato\",sans-serif',\r\n                    background: 'linear-gradient(to right, #00c6ff, #0072ff)'\r\n                }}\r\n                >\r\n                <header className=\"max-w-lg mx-auto\">\r\n                    <p>\r\n                    <h1 className=\"text-4xl font-bold text-white text-center\">Random chat</h1>\r\n                    </p>\r\n                </header>\r\n\r\n                { children }\r\n\r\n                <footer className=\"max-w-lg mx-auto flex justify-center text-white\">\r\n                    <p className=\"hover:underline\">Contacto</p>\r\n                    <span className=\"mx-3\">•</span>\r\n                    <p className=\"hover:underline\">Privacy</p>\r\n                </footer>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default memo(AuthLayout)","import React from 'react'\r\n\r\nconst alertType ={\r\n    info:{\r\n        color: 'blue',\r\n        logo: () => (\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" className=\"flex-none fill-current text-blue-500 h-4 w-4\">\r\n                <path d=\"M12 0c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm-.001 5.75c.69 0 1.251.56 1.251 1.25s-.561 1.25-1.251 1.25-1.249-.56-1.249-1.25.559-1.25 1.249-1.25zm2.001 12.25h-4v-1c.484-.179 1-.201 1-.735v-4.467c0-.534-.516-.618-1-.797v-1h3v6.265c0 .535.517.558 1 .735v.999z\" />\r\n            </svg>\r\n        )\r\n    },\r\n    success:{\r\n        color: 'green',\r\n        logo: () =>(\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" className=\"flex-none fill-current text-green-500 h-4 w-4\">\r\n            <path d=\"M12 0c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm-1.25 16.518l-4.5-4.319 1.396-1.435 3.078 2.937 6.105-6.218 1.421 1.409-7.5 7.626z\" /></svg>\r\n        )\r\n    },\r\n    error:{\r\n        color: 'red',\r\n        logo: () =>(\r\n            <svg xmlns=\"http://www.w3.org/2000/svg\" viewBox=\"0 0 24 24\" className=\"flex-none fill-current text-red-500 h-4 w-4\">\r\n                <path d=\"M12 0c-6.627 0-12 5.373-12 12s5.373 12 12 12 12-5.373 12-12-5.373-12-12-12zm4.597 17.954l-4.591-4.55-4.555 4.596-1.405-1.405 4.547-4.592-4.593-4.552 1.405-1.405 4.588 4.543 4.545-4.589 1.416 1.403-4.546 4.587 4.592 4.548-1.403 1.416z\" />\r\n            </svg>\r\n        )\r\n    }\r\n}\r\nexport const Alert = ({ type='info', msg = 'message' }) => {\r\n\r\n    if( !Object.keys( alertType ).includes( type ) ){\r\n        return null\r\n    }\r\n\r\n    return (\r\n        <div className={`bg-${ alertType[type].color}-100 p-5 w-full border-l-4 border-${ alertType[type].color}-500 shadow my-1`}>\r\n              <div className=\"flex space-x-3\">\r\n                { alertType[type].logo() }\r\n                <div className={`flex-1 leading-tight text-sm text-${ alertType[type].color}-700`}>{ msg }</div>\r\n              </div>\r\n        </div> \r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Alert } from '../utils/Alert'\r\n\r\nexport const LoginForm = ({ formik }) => {\r\n\r\n    return (\r\n        <form className=\"flex flex-col\" \r\n                onSubmit={ formik.handleSubmit }\r\n            >\r\n            { formik.touched.email && formik.errors.email ?(\r\n                    <Alert type=\"error\" msg={ formik.errors.email }/>\r\n            ): null }\r\n            <div className=\"mb-6 pt-3 rounded bg-gray-200\">\r\n                <label className=\"block text-gray-700 text-sm font-bold mb-2 ml-3\" htmlFor=\"email\">Email</label>\r\n                <input \r\n                    className={`bg-gray-200 rounded w-full text-gray-700 focus:outline-none border-b-4 border-gray-300 focus:border-blue-600 transition duration-500 px-3 pb-3 ${ formik.touched.email && formik.errors.email && 'border-red-600' }`}  \r\n                    type=\"text\" \r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    onChange={ formik.handleChange }\r\n                    onBlur={ formik.handleBlur }\r\n                    value={ formik.values.email }\r\n                />\r\n            </div>\r\n                    \r\n            { formik.touched.password && formik.errors.password ?(\r\n                <Alert type=\"error\" msg={ formik.errors.password }/>\r\n            ): null }\r\n            <div className=\"mb-6 pt-3 rounded bg-gray-200\">\r\n                <label className=\"block text-gray-700 text-sm font-bold mb-2 ml-3\" htmlFor=\"password\">Password</label>\r\n                <input \r\n                    className={`bg-gray-200 rounded w-full text-gray-700 focus:outline-none border-b-4 border-gray-300 focus:border-blue-600 transition duration-500 px-3 pb-3 ${ formik.touched.password && formik.errors.password && 'border-red-600' }`} \r\n                    type=\"password\" \r\n                    id=\"password\"\r\n                    onChange={ formik.handleChange }\r\n                    onBlur={ formik.handleBlur }\r\n                    value={ formik.values.password } \r\n                />\r\n            </div>\r\n\r\n            <div className=\"flex justify-end\">\r\n                <p className=\"text-sm text-blue-600 hover:text-blue-700 hover:underline mb-6\">olvidaste tu contraseña?</p>\r\n            </div>\r\n\r\n            <button \r\n                className=\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 rounded shadow-lg hover:shadow-xl transition duration-200\" \r\n                type=\"submit\"\r\n                >Login</button>\r\n        </form>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport AuthLayout from './AuthLayout'\r\nimport { LoginForm } from './LoginForm'\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport { Alert } from '../utils/Alert'\r\nimport { gql, useMutation } from '@apollo/client'\r\n\r\nconst LOGIN = gql`\r\n    mutation loginUser($input: LoginInput!){\r\n        loginUser(input: $input){\r\n            token\r\n        }\r\n    }\r\n`\r\n\r\nexport const Login = () => {\r\n\r\n    const [loginUser] = useMutation(LOGIN)\r\n    const [error,setError] = useState(null)\r\n    const history = useHistory()\r\n\r\n    const formik = useFormik({\r\n        initialValues:{\r\n            email: '',\r\n            password: ''\r\n        },\r\n        validationSchema: Yup.object({\r\n            email: Yup.string()\r\n                .email('el email no es valido')\r\n                .required('El email no puede ir vacio'),\r\n            password: Yup.string()\r\n                .required('El password es obligatorio')\r\n        }),\r\n        onSubmit: async ({email,password}) =>{\r\n            try {\r\n                const {data} = await loginUser({\r\n                    variables:{\r\n                        input:{\r\n                            email,\r\n                            password\r\n                        }\r\n                    }\r\n                })\r\n                localStorage.setItem('token', data.loginUser.token )\r\n                history.push('/')\r\n            } catch (err) {\r\n                setError( err.message )\r\n                setTimeout(()=> setError(null), 3000)\r\n            }\r\n        }\r\n    })\r\n\r\n    return (\r\n        <AuthLayout>\r\n            <main className=\"bg-white max-w-lg mx-auto p-8 md:p-12 my-10 rounded-lg shadow-2xl\">\r\n                <section>\r\n                    <h3 className=\"font-bold text-2xl\">Bienvenido</h3>\r\n                    <p className=\"text-gray-600 pt-2\">Ingresa a tu cuenta</p>\r\n                </section>\r\n                <section className=\"mt-10\">\r\n                { error && <Alert type=\"error\" msg={ error }/>}\r\n\r\n                <LoginForm formik={ formik }/>\r\n\r\n                </section>\r\n\r\n                <div className=\"max-w-lg mx-auto text-center mt-12 mb-6\">\r\n                    <p className=\"text-black\">¿No tienes una cuenta? \r\n                        <Link to='/signup' className=\"underline\"> Sign Up</Link>.\r\n                    </p>\r\n                </div>\r\n            </main>\r\n\r\n            \r\n        </AuthLayout>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { Alert } from '../utils/Alert'\r\n\r\nconst SignUpForm = ({ formik }) => {\r\n    return (\r\n        <form className=\"flex flex-col\" \r\n                onSubmit={ formik.handleSubmit }\r\n            >\r\n\r\n            { formik.touched.name && formik.errors.name ?(\r\n                    <Alert type=\"error\" msg={ formik.errors.name }/>\r\n            ): null }\r\n            <div className=\"mb-6 pt-3 rounded bg-gray-200\">\r\n                <label className=\"block text-gray-700 text-sm font-bold mb-2 ml-3\" htmlFor=\"name\">Name</label>\r\n                <input \r\n                    className={`bg-gray-200 rounded w-full text-gray-700 focus:outline-none border-b-4 border-gray-300 focus:border-blue-600 transition duration-500 px-3 pb-3 ${ formik.touched.name && formik.errors.name && 'border-red-600' }`}  \r\n                    type=\"text\" \r\n                    id=\"name\"\r\n                    name=\"name\"\r\n                    onChange={ formik.handleChange }\r\n                    onBlur={ formik.handleBlur }\r\n                    value={ formik.values.name }\r\n                />\r\n            </div>\r\n\r\n            { formik.touched.email && formik.errors.email ?(\r\n                    <Alert type=\"error\" msg={ formik.errors.email }/>\r\n            ): null }\r\n            <div className=\"mb-6 pt-3 rounded bg-gray-200\">\r\n                <label className=\"block text-gray-700 text-sm font-bold mb-2 ml-3\" htmlFor=\"email\">Email</label>\r\n                <input \r\n                    className={`bg-gray-200 rounded w-full text-gray-700 focus:outline-none border-b-4 border-gray-300 focus:border-blue-600 transition duration-500 px-3 pb-3 ${ formik.touched.email && formik.errors.email && 'border-red-600' }`}  \r\n                    type=\"text\" \r\n                    id=\"email\"\r\n                    name=\"email\"\r\n                    onChange={ formik.handleChange }\r\n                    onBlur={ formik.handleBlur }\r\n                    value={ formik.values.email }\r\n                />\r\n            </div>\r\n                    \r\n            { formik.touched.password && formik.errors.password ?(\r\n                <Alert type=\"error\" msg={ formik.errors.password }/>\r\n            ): null }\r\n            <div className=\"mb-6 pt-3 rounded bg-gray-200\">\r\n                <label className=\"block text-gray-700 text-sm font-bold mb-2 ml-3\" htmlFor=\"password\">Password</label>\r\n                <input \r\n                    className={`bg-gray-200 rounded w-full text-gray-700 focus:outline-none border-b-4 border-gray-300 focus:border-blue-600 transition duration-500 px-3 pb-3 ${formik.touched.password && formik.errors.password && 'border-red-600' }`} \r\n                    type=\"password\" \r\n                    id=\"password\"\r\n                    onChange={ formik.handleChange }\r\n                    onBlur={ formik.handleBlur }\r\n                    value={ formik.values.password } \r\n                />\r\n            </div>\r\n\r\n            <button \r\n                className=\"bg-blue-600 hover:bg-blue-700 text-white font-bold py-2 rounded shadow-lg hover:shadow-xl transition duration-200\" \r\n                type=\"submit\"\r\n                >Sign Up</button>\r\n        </form>\r\n    )\r\n}\r\n\r\nexport default SignUpForm\r\n","import React, { useState } from 'react'\r\nimport { Link, useHistory } from 'react-router-dom'\r\nimport AuthLayout from './AuthLayout'\r\nimport { useFormik } from 'formik'\r\nimport * as Yup from 'yup'\r\nimport SignUpForm from './SignUpForm'\r\nimport { Alert } from '../utils/Alert'\r\nimport { gql, useMutation } from '@apollo/client'\r\n\r\nconst CREATE_USER = gql`\r\n    mutation($input: UserInput!){\r\n        createUser(input: $input) {\r\n            token\r\n        }\r\n    }\r\n`\r\n\r\nexport const SignUp = () => {\r\n\r\n    const [error,setError] = useState(null)\r\n    const [ createUser ] = useMutation(CREATE_USER)\r\n    const history = useHistory()\r\n\r\n    const formik = useFormik({\r\n        initialValues:{\r\n            name: '',\r\n            email: '',\r\n            password: ''\r\n        },\r\n        validationSchema: Yup.object({\r\n            name: Yup.string()\r\n                .required('El mombre es obligatorio'),\r\n            email: Yup.string()\r\n                .email('el email no es valido')\r\n                .required('El email no puede ir vacio'),\r\n            password: Yup.string()\r\n                .required('El password es obligatorio')\r\n        }),\r\n        onSubmit: async ({name,email,password}) =>{\r\n            try {\r\n                const {data} = await createUser({\r\n                    variables:{\r\n                        input:{\r\n                            name,\r\n                            email,\r\n                            password\r\n                        }\r\n                    }\r\n                })\r\n                localStorage.setItem('token', data.createUser.token )\r\n                history.push('/')\r\n            } catch (error) {\r\n                setError( error.message )\r\n            }\r\n        }   \r\n    })\r\n\r\n    return (\r\n        <AuthLayout>\r\n            <main className=\"bg-white max-w-lg mx-auto p-8 md:p-12 my-10 rounded-lg shadow-2xl\">\r\n                <section>\r\n                    <h3 className=\"font-bold text-2xl\">Bienvenido</h3>\r\n                    <p className=\"text-gray-600 pt-2\">Cree una cuenta nueva</p>\r\n                </section>\r\n                <section className=\"mt-10\">\r\n\r\n                    { error && <Alert type=\"error\" msg={ error }/>}\r\n\r\n                    <SignUpForm formik={ formik }/>\r\n\r\n                </section>\r\n\r\n                <div className=\"max-w-lg mx-auto text-center mt-12 mb-6\">\r\n                    <p className=\"text-black\">¿Ya tienes una cuenta? \r\n                        <Link to='/login' className=\"underline\"> Login</Link>.\r\n                    </p>\r\n                </div>\r\n            </main>\r\n\r\n            \r\n        </AuthLayout>\r\n    )\r\n}\r\n","import { ApolloClient, createHttpLink, InMemoryCache } from '@apollo/client';\r\nimport fetch from 'node-fetch';\r\nimport { setContext } from 'apollo-link-context'\r\n\r\nconst httpLink =  createHttpLink({\r\n    uri: process.env.REACT_APP_API_URL,\r\n    fetch\r\n});\r\n\r\nconst authLink = setContext((_,{ headers }) =>{\r\n\r\n    // read storage\r\n    const token = localStorage.getItem('token');\r\n\r\n    return{\r\n        headers: {\r\n            ...headers,\r\n            token: token ? `${ token }` : ''\r\n        }\r\n    }\r\n})\r\n\r\nconst client = new ApolloClient({\r\n    connectToDevTools: true,\r\n    cache: new InMemoryCache(),\r\n    link: authLink.concat( httpLink )\r\n});\r\n\r\nexport default client;","import { createContext } from \"react\";\r\n// context whit user info\r\nexport const userContext = createContext();\r\n\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport const MovileNavigation = () => {\r\n    // this component is only visible in small screens such as smartphones\r\n        \r\n    return (\r\n        <footer className=\"md:hidden w-full bg-white shadow-xl h-20 fixed bottom-0 p-4\">\r\n            <div className=\"flex justify-around w-full\">\r\n\r\n                <Link \r\n                    to='/' \r\n                    className=\"text-blue-600 rounded-full cursor-pointer p-2 flex-col items-center hover:bg-blue-200\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 mx-auto\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                        <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M3 12l2-2m0 0l7-7 7 7M5 10v10a1 1 0 001 1h3m10-11l2 2m-2-2v10a1 1 0 01-1 1h-3m-6 0a1 1 0 001-1v-4a1 1 0 011-1h2a1 1 0 011 1v4a1 1 0 001 1m-6 0h6\" />\r\n                    </svg>\r\n                    <spam>Home</spam>\r\n                </Link>\r\n\r\n                <Link \r\n                    to='/myMessages' \r\n                    className=\"text-blue-600 rounded-full cursor-pointer p-2 flex-col items-center hover:bg-blue-200\">\r\n                    <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-6 w-6 mx-auto\" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                            <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M19 11H5m14 0a2 2 0 012 2v6a2 2 0 01-2 2H5a2 2 0 01-2-2v-6a2 2 0 012-2m14 0V9a2 2 0 00-2-2M5 11V9a2 2 0 012-2m0 0V5a2 2 0 012-2h6a2 2 0 012 2v2M7 7h10\" />\r\n                    </svg>\r\n                    <spam>My messages</spam>\r\n                </Link>\r\n\r\n                </div>\r\n        </footer>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport { useHistory } from 'react-router-dom'\r\nimport client from '../../config/apollo'\r\n\r\nexport const UserNavOptions = ({ user }) => {\r\n\r\n    const history = useHistory()\r\n\r\n    const handleLogout = () =>{\r\n        localStorage.removeItem('token')\r\n        client.resetStore()\r\n        history.go(0)\r\n    }\r\n\r\n    return (\r\n        <li className=\"toggleable hover:bg-blue-800 hover:text-white\">\r\n            \r\n            <input type=\"checkbox\" defaultValue=\"selected\" id=\"toggle-one\" className=\"toggle-input\" />\r\n            <label htmlFor=\"toggle-one\" className=\"block cursor-pointer py-6 px-4 lg:p-6 text-sm lg:text-base font-bold\">{ user.name }</label>\r\n  \r\n            <div role=\"toggle\" className=\"p-6 z-10 mega-menu mb-16 sm:mb-0 shadow-xl bg-blue-800 sm:w-full md:w-1/2 lg:w-1/3\">\r\n                <div className=\"container mx-auto w-full flex flex-wrap justify-between\">\r\n                  \r\n                  <ul className=\"px-4 sm:w-full  pb-6 pt-6 lg:pt-3\">\r\n                    <h3 className=\"font-bold text-xl text-white text-bold mb-2\">{ user.email }</h3>\r\n                    \r\n                    <li>\r\n                      <button\r\n                        className=\"block p-3 hover:bg-blue-600 text-gray-300 hover:text-white\"\r\n                        onClick={ handleLogout }\r\n                        >Cerrar sesión</button>\r\n                    </li>\r\n                   \r\n                  </ul>\r\n                  \r\n                </div>\r\n            </div>\r\n        </li>\r\n    )\r\n}\r\n","import React from 'react'\r\nimport './nav.css'\r\nimport { Link} from 'react-router-dom'\r\nimport { UserNavOptions } from './UserNavOptions'\r\n\r\nexport const Nav = ({ data }) => {\r\n\r\n    return (\r\n      <nav className=\"relative bg-white border-b-2 border-gray-300 text-gray-900\">\r\n        \r\n      <div className=\"container mx-auto flex justify-between\">\r\n        <div className=\"relative block p-4 lg:p-6 text-xl text-blue-600 font-bold\">Random Chat</div>\r\n        <ul className=\"flex\">\r\n          \r\n          {/*This options are only visible in large screens*/}\r\n          <li className=\"hover:bg-blue-800 hover:text-white hidden md:block\">\r\n            <Link to='/' className=\"relative block py-6 px-2 lg:p-6 text-sm lg:text-base font-bold\">Home</Link>\r\n          </li>\r\n          <li className=\"hover:bg-blue-800 hover:text-white hidden md:block\">\r\n            <Link to='/myMessages' className=\"relative block py-6 px-2 lg:p-6 text-sm lg:text-base font-bold\">Mis mensajes</Link>\r\n          </li>\r\n\r\n          { data?.getUser ? (\r\n              <UserNavOptions user={ data.getUser} />\r\n          ):(\r\n            <Link \r\n              to='/login'\r\n              className=\"font-bold hover:underline my-auto mx-4\"\r\n              >Ingresa a tu cuenta</Link>\r\n          )}\r\n        \r\n        </ul>\r\n      </div>\r\n    </nav>\r\n    \r\n    )\r\n}\r\n","import { gql, useQuery } from '@apollo/client'\r\nimport React, { useEffect } from 'react'\r\nimport client from '../../config/apollo'\r\nimport { userContext } from '../context/userContext'\r\nimport { MovileNavigation } from './MovileNavigation'\r\nimport { Nav } from './Nav'\r\n\r\nconst GET_USER = gql`\r\n  query getUser{\r\n    getUser{\r\n      id\r\n      name\r\n      email\r\n    }\r\n  }\r\n`\r\n\r\nexport const Layout = ({ children }) => {\r\n\r\n    const { data } = useQuery( GET_USER )\r\n\r\n    // reset the apollo cache in order to have the current token and current data\r\n    useEffect(()=>{\r\n        client.resetStore()\r\n    },[])\r\n    // using a context in order to provide data to child components and scale in future\r\n    return (\r\n        <userContext.Provider value={{\r\n            data\r\n        }}>\r\n            <div class=\"bg-gray-200 font-sans leading-normal tracking-normal w-screen min-w-full\">\r\n                <Nav data={ data }/>\r\n                    <div className=\" bg-gray-200 sm:w-full md:w-3/4 lg:w-1/2 mx-auto p-4\">\r\n                        { children }\r\n                    </div>\r\n\r\n                <MovileNavigation />\r\n            </div>\r\n        </userContext.Provider>\r\n    )\r\n}\r\n","import React from 'react'\r\n\r\nexport default function LoadingMessage() {\r\n    return (\r\n        <div className=\"p-4 my-2 rounded shadow border-l-4 border-blue-500 w-full h-40 loading\"\r\n        >\r\n           <span>Cargando...</span>\r\n        </div>\r\n    )\r\n}\r\n","\r\nexport const formatDate = ( date ) =>{\r\n    const d = new Date( date )\r\n    let year = new Intl.DateTimeFormat('en', { year: 'numeric' }).format(d);\r\n    let month = new Intl.DateTimeFormat('en', { month: 'short' }).format(d);\r\n    let day = new Intl.DateTimeFormat('en', { day: '2-digit' }).format(d);\r\n    return `${ day }/${ month }/${ year }`\r\n}","import React from 'react'\r\nimport { formatDate } from '../../helpers/formatDate'\r\n\r\nexport const Message = ({ message, own = false, setEdit=()=>{} }) => {\r\n    // in this component only the prop message is obligatory, this is in order to reuse the component in edition\r\n    return (\r\n        <div className=\"p-4 my-2 rounded bg-white shadow border-l-4 border-blue-500 w-full\">\r\n\r\n            <div className=\"flex justify-between\">\r\n                <p className=\"text-sm\"><span className=\"font-semibold\">publicado: </span>{ formatDate( message.createdAt ) }</p>\r\n                \r\n                {\r\n                    own &&(\r\n                        <button \r\n                            className=\"flex items-center rounded-lg px-2 py-1 border border-blue-600 text-blue-600 hover:bg-blue-600 hover:text-white\"\r\n                            onClick={()=> setEdit( message )}\r\n                        >\r\n                            <span className=\"text-sm\">Editar</span>\r\n                            <svg xmlns=\"http://www.w3.org/2000/svg\" className=\"h-4 w-4 \" fill=\"none\" viewBox=\"0 0 24 24\" stroke=\"currentColor\">\r\n                                <path strokeLinecap=\"round\" strokeLinejoin=\"round\" strokeWidth={2} d=\"M15.232 5.232l3.536 3.536m-2.036-5.036a2.5 2.5 0 113.536 3.536L6.5 21.036H3v-3.572L16.732 3.732z\" />\r\n                            </svg>\r\n                        </button>\r\n                    )\r\n                }\r\n                \r\n            </div>\r\n            <p className=\"ml-4 h-auto overflow-x-auto text-justify\">\r\n                \"{ message.text }\"\r\n            </p>\r\n        </div>\r\n    )\r\n}\r\n","import { useQuery, gql } from '@apollo/client'\r\nimport React, { useEffect, useState } from 'react'\r\nimport LoadingMessage from './LoadingMessage'\r\nimport { Message } from './Message'\r\n\r\nconst GET_RANDOM_MESSAGE = gql`\r\n  query getRandomMessage{\r\n    getRandomMessage {\r\n      id\r\n      text\r\n      createdAt\r\n    }\r\n  }\r\n`\r\n\r\nexport const GetMessage = () => {\r\n  \r\n  const { data, error, loading, refetch } = useQuery( GET_RANDOM_MESSAGE )\r\n  const [message, setMessage] = useState( null )\r\n  \r\n  // this effect ensures that the message is always new, is necesary because apollo client cache results\r\n  useEffect(()=>{\r\n    if( data?.getRandomMessage ){\r\n      setMessage( data.getRandomMessage );\r\n    }\r\n  },[ data ])\r\n  // if the query is loading display a void component\r\n  if( loading ) return <LoadingMessage />\r\n  if( error ) return 'error'\r\n  // this func brings a new random message \r\n  const handleRefetch = async() =>{\r\n    refetch()\r\n  }\r\n  \r\n    return (\r\n        <div className=\"bg-white p-4 rounded shadow w-full flex-col justify-end\">\r\n            \r\n            {\r\n              message && <Message message={ message }/>\r\n            }\r\n      \r\n            <div>\r\n                <button\r\n                    className=\"bg-blue-600 text-white rounded p-2 mx-auto my-2 shadow hover:bg-blue-700\"\r\n                    onClick={ handleRefetch }\r\n                >\r\n                    Traer otro mensaje\r\n                </button>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n","import React, { useState } from 'react'\r\n\r\nexport const MessageForm = ({ handleSubmit, initialText='' }) => {\r\n    // the func handle submit most be provider by the father component\r\n    const [text,setText] = useState( initialText )\r\n\r\n    return (\r\n        <form\r\n                onSubmit={(e)=> handleSubmit(e,text) }\r\n            >\r\n                <textarea\r\n                    className=\"border-2 p-2 border-gray-400 rounded w-full font-semibold focus:outline-none focus:border-blue-600\"\r\n                    placeholder=\"tú mensaje (logitud maxima 250 caracteres)\"\r\n                    value={ text }\r\n                    onChange={ (e)=> setText( e.target.value ) }\r\n                >\r\n\r\n                </textarea>\r\n                <div className=\"flex justify-between w-full\">\r\n                    <button\r\n                        className=\"bg-blue-600 text-white rounded p-2 my-2 shadow hover:bg-blue-700\"\r\n                        type=\"submit\"\r\n                    >\r\n                        Publicar mensaje\r\n                    </button>\r\n                    <span className=\"text-gray-600\">caracteres: { text.length }</span>\r\n                </div>\r\n        </form>\r\n    )\r\n}\r\n","import { gql, useMutation } from '@apollo/client'\r\nimport React from 'react'\r\nimport { MessageForm } from './MessageForm'\r\nimport { ToastContainer, toast } from 'react-toastify';\r\n\r\nconst CREATE_MESSAGE = gql`\r\n    mutation createMessage($input: MessageInput!){\r\n        createMessage(input: $input) {\r\n            text\r\n        }\r\n    }\r\n`\r\n\r\nexport const PostMessage = () => {\r\n\r\n    const [ createMessage ] = useMutation( CREATE_MESSAGE )\r\n\r\n    const handleSubmit = async(e, text) =>{\r\n        e.preventDefault()\r\n        text = text.trim()\r\n        if( text.length < 1 || text.length > 255){\r\n            return toast('El mensaje debe de tener entre 1 y 255 caracteres')\r\n        }\r\n\r\n        try {\r\n            await createMessage({ variables:{ input:{ text } }})\r\n            toast.success('Mensaje publicado')\r\n\r\n        } catch (error) {\r\n            toast.error('Hubo un error')\r\n            console.log( error );\r\n        }\r\n    }\r\n\r\n    return (\r\n        <div className=\"bg-white p-4 rounded shadow w-full flex-col justify-end\">\r\n            <ToastContainer />\r\n            <MessageForm handleSubmit={ handleSubmit } initialText=''/>\r\n            \r\n        </div>\r\n    )\r\n}\r\n","import { gql, useQuery } from '@apollo/client'\r\nimport React from 'react'\r\nimport { Layout } from './layout/Layout'\r\nimport { GetMessage } from './messages/GetMessage'\r\nimport { PostMessage } from './messages/PostMessage'\r\n\r\nconst GET_USER = gql`\r\n  query getUser{\r\n    getUser{\r\n      id\r\n      name\r\n    }\r\n  }\r\n`\r\n\r\nexport const Home = () => {\r\n  \r\n  // if user is in cache not send the query\r\n  const { data } = useQuery( GET_USER )\r\n\r\n    return (\r\n        <Layout>\r\n          <div className=\"p-10 flex flex-col space-y-3\">\r\n            \r\n            <h1 className=\"font-semibold text-2xl text-center text-gray-800\">Mensajes aleatorios</h1>\r\n\r\n            <GetMessage />\r\n            \r\n            {\r\n              data?.getUser &&\r\n              <div>\r\n                <h2 className=\"font-semibold text-2xl text-center text-gray-800\">Publica un mensaje anonimo</h2>\r\n                <PostMessage />\r\n              </div>\r\n            }\r\n          </div>\r\n\r\n\r\n        </Layout>\r\n    )\r\n}\r\n","import { gql, useMutation, useQuery } from '@apollo/client'\r\nimport React, { useState } from 'react'\r\nimport { Layout } from './layout/Layout'\r\nimport { Message } from './messages/Message'\r\nimport Modal from 'react-modal';\r\nimport { MessageForm } from './messages/MessageForm';\r\nimport { ToastContainer, toast } from 'react-toastify';\r\nimport LoadingMessage from './messages/LoadingMessage';\r\n\r\nconst GET_USER_MESSAGES = gql`\r\n    query getUserMessages{\r\n        getUserMessages {\r\n            id\r\n            text\r\n            createdAt\r\n        }\r\n    }\r\n`\r\nconst UPDATE_MESSAGE = gql`\r\n    mutation updateMessage($input: UpdateMessageInput!){\r\n        updateMessage(input: $input) {\r\n            id\r\n            text\r\n        }\r\n  }\r\n`\r\nexport const MyMessages = () => {\r\n\r\n    const { data, loading, refetch } = useQuery( GET_USER_MESSAGES )\r\n    const [ updateMessage ] = useMutation( UPDATE_MESSAGE )\r\n    // manage what message will be updated and if modal is open\r\n    const [edit, setEdit] = useState( null )\r\n    const messages = data?.getUserMessages || []\r\n\r\n    const handleEdit = async(e, text) =>{\r\n        e.preventDefault()\r\n        text = text.trim()\r\n        if( text.length < 1 || text.length > 255){\r\n            return toast.warn('El mensaje debe de tener entre 1 y 255 caracteres')\r\n        }\r\n\r\n        try {\r\n            await updateMessage({\r\n                 variables:{ input:{ text, id: edit.id }}\r\n            })\r\n            setEdit( null )\r\n            // update the list of messages\r\n            refetch()\r\n            toast.success('Mensaje actualizado')\r\n        } catch (error) {\r\n            toast.error('Hubo un error')\r\n        }\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <ToastContainer />\r\n        <Layout>\r\n\r\n            <div className=\"p-10 flex flex-col space-y-3 mb-20\">\r\n            \r\n                <h1 className=\"font-semibold text-2xl text-center text-gray-800\">Mis mensajes</h1>\r\n\r\n                <div className=\" p-2 \">\r\n                    { loading && <LoadingMessage />}\r\n                    { messages.length === 0 && 'Aun no tienes mensajes'}\r\n                    {\r\n                        messages.map( message =>(\r\n                            <Message \r\n                                key={ message.id }\r\n                                message={ message }\r\n                                own={ true }\r\n                                setEdit={ setEdit }\r\n                            />\r\n                        ))\r\n                    }\r\n                </div>\r\n\r\n            </div>\r\n            \r\n            {/* modal for edit a meesage of the list */}\r\n            <Modal\r\n                isOpen={ !!edit }\r\n                //onAfterOpen={afterOpenModal}\r\n                onRequestClose={()=> setEdit( null )}\r\n                contentLabel=\"Editar\"\r\n                style={{\r\n                    content:{\r\n                        height: '300px',\r\n                        width: '500px',\r\n                        margin: 'auto'\r\n                    }\r\n                }}\r\n            >\r\n                <button\r\n                    className=\"float-right\"\r\n                    onClick={ ()=> setEdit( null ) }\r\n                >X</button>\r\n\r\n                <h3 className=\"text-xl my-2 text-center\">Editar mensaje</h3>\r\n                <MessageForm \r\n                    initialText={ edit?.text }\r\n                    handleSubmit={ handleEdit }\r\n                />\r\n            </Modal>\r\n        </Layout>\r\n        </>\r\n    )\r\n}\r\n","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Redirect, Route } from 'react-router';\r\n\r\n\r\nexport const PrivateRoute = ({\r\n    isAuthenticated,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route {...rest}\r\n            component={ (props) =>(\r\n                ( isAuthenticated )\r\n                    ? <Component {...props} />\r\n                    : <Redirect to='/login' /> \r\n            )}\r\n        \r\n        />\r\n    )\r\n}\r\n\r\n\r\nPrivateRoute.propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}","import React from 'react';\r\nimport PropTypes from 'prop-types';\r\nimport { Redirect, Route } from 'react-router';\r\n\r\nexport const PublicRoute = ({\r\n    isAuthenticated,\r\n    component: Component,\r\n    ...rest\r\n}) => {\r\n    return (\r\n        <Route {...rest}\r\n            component={ (props) =>(\r\n                ( !isAuthenticated )\r\n                    ? <Component {...props} />\r\n                    : <Redirect to='/' /> \r\n            )}\r\n        \r\n        />\r\n    )\r\n}\r\n\r\n\r\nPublicRoute.propTypes = {\r\n    isAuthenticated: PropTypes.bool.isRequired,\r\n    component: PropTypes.func.isRequired\r\n}","import React, { useEffect } from 'react'\r\nimport {\r\n    BrowserRouter as Router,\r\n    Switch,\r\n    Redirect,\r\n    Route\r\n} from \"react-router-dom\";\r\nimport { Login } from '../components/auth/Login';\r\nimport { SignUp } from '../components/auth/SignUp';\r\nimport { Home } from '../components/Home';\r\nimport { MyMessages } from '../components/MyMessages';\r\nimport { PrivateRoute } from './PrivateRoute';\r\nimport { PublicRoute } from './PublicRoute';\r\nimport { gql, useQuery } from '@apollo/client'\r\n\r\nconst GET_USER = gql`\r\n  query getUser{\r\n    getUser{\r\n      id\r\n      name\r\n      email\r\n    }\r\n  }\r\n`\r\n\r\nexport const AppRouter = () => {\r\n\r\n    const { data, loading, error } = useQuery( GET_USER )\r\n\r\n    useEffect(()=>{\r\n      if( error ){\r\n        localStorage.removeItem('token')\r\n      }\r\n    },[ data, error ])\r\n    if ( loading ) {\r\n        return (<h5>Espere...</h5>);\r\n    }\r\n\r\n    return (\r\n        <Router>\r\n              <Switch>\r\n                  <Route exact path='/' component={ Home } />\r\n                  <PrivateRoute exact path='/myMessages' component={ MyMessages } isAuthenticated={ !!data?.getUser } />\r\n                \r\n                  <PublicRoute path='/login' component={ Login } isAuthenticated={ !!data?.getUser  }/>\r\n                  <PublicRoute path='/signup' component={ SignUp } isAuthenticated={ !!data?.getUser }/>\r\n                  <Redirect to='/'/>\r\n              </Switch>\r\n        </Router>\r\n    )\r\n}\r\n","import { AppRouter } from \"./routes/AppRouter\";\r\nimport './index.css'\r\nimport { ApolloProvider } from \"@apollo/client\";\r\nimport client from \"./config/apollo\";\r\nimport 'react-toastify/dist/ReactToastify.css';\r\n\r\nfunction App() {\r\n\r\n  // wraps the app whit the apollo client\r\n  return (\r\n    <ApolloProvider client={ client }>\r\n      <AppRouter />\r\n    </ApolloProvider>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://cra.link/PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(/^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/)\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://cra.link/PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then((registration) => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://cra.link/PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch((error) => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then((response) => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then((registration) => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log('No internet connection found. App is running in offline mode.');\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then((registration) => {\r\n        registration.unregister();\r\n      })\r\n      .catch((error) => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport App from './App';\r\nimport * as serviceWorkerRegistration from './serviceWorkerRegistration';\r\n\r\nReactDOM.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://cra.link/PWA\r\nserviceWorkerRegistration.register();\r\n"],"sourceRoot":""}